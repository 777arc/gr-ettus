<?xml version="1.0"?>
<block>
  <name>RFNoC: Generic Block</name>
  <key>uhd_rfnoc_streamer</key>
  <import>import ettus</import>
  <make>ettus.rfnoc_generic(
    self.device3,
    uhd.stream_args( \# TX Stream Args
        cpu_format="$tx_type",
        otw_format="$otw",
	args="gr_vlen=${in_grvlen},${tx_stream_args}",
    ),
    uhd.stream_args( \# RX Stream Args
        cpu_format="$type",
        otw_format="$otw",
	args="gr_vlen=${out_grvlen},${rx_stream_args}",
    ),
    $block_name, $block_index, $device_index,
)</make>

  <param>
    <name>Block ID</name>
    <key>block_name</key>
    <type>string</type>
  </param>
  <param>
    <name>Settings Registers</name>
    <key>sregs</key>
    <value>{}</value>
    <type>raw</type>
    <hide>part</hide>
  </param>

  <param>
    <name>Input Stream Args</name>
    <key>tx_stream_args</key>
    <type>string</type>
    <tab>Input Config</tab>
  </param>
  <param>
    <name>Input Channels</name>
    <key>input_chans</key>
    <value>(0,)</value>
    <type>int_vector</type>
    <tab>Input Config</tab>
  </param>
  <param>
    <name>Vector Length</name>
    <key>in_grvlen</key>
    <value>1</value>
    <type>int</type>
    <tab>Input Config</tab>
  </param>
  <param>
    <name>Host Data Format</name>
    <key>in_type</key>
    <type>enum</type>
    <option>
      <name>Complex float32</name>
      <key>fc32</key>
      <opt>type:complex</opt>
    </option>
    <option>
      <name>Complex int16</name>
      <key>sc16</key>
      <opt>type:sc16</opt>
    </option>
    <option>
      <name>Byte</name>
      <key>u8</key>
      <opt>type:byte</opt>
    </option>
    <option>
      <name>VITA word32</name>
      <key>item32</key>
      <opt>type:s32</opt>
    </option>
    <tab>Input Config</tab>
  </param>
  <param>
    <name>Device Data Format</name>
    <key>otw</key>
    <type>enum</type>
    <option>
      <name>Complex int16</name>
      <key>sc16</key>
    </option>
    <option>
      <name>Complex int8</name>
      <key>sc8</key>
    </option>
    <option>
      <name>Byte</name>
      <key>u8</key>
    </option>
    <tab>Input Config</tab>
  </param>

  <param>
    <name>Output Stream Args</name>
    <key>rx_stream_args</key>
    <type>string</type>
    <tab>Output Config</tab>
  </param>
  <param>
    <name>Output Channels</name>
    <key>output_chans</key>
    <value>(0,)</value>
    <type>int_vector</type>
    <tab>Output Config</tab>
  </param>
  <param>
    <name>Vector Length</name>
    <key>out_grvlen</key>
    <value>1</value>
    <type>int</type>
    <tab>Output Config</tab>
  </param>
  <param>
    <name>Host Data Format</name>
    <key>in_type</key>
    <type>enum</type>
    <option>
      <name>Complex float32</name>
      <key>fc32</key>
      <opt>type:complex</opt>
    </option>
    <option>
      <name>Complex int16</name>
      <key>sc16</key>
      <opt>type:sc16</opt>
    </option>
    <option>
      <name>Byte</name>
      <key>u8</key>
      <opt>type:byte</opt>
    </option>
    <option>
      <name>VITA word32</name>
      <key>item32</key>
      <opt>type:s32</opt>
    </option>
    <tab>Output Config</tab>
  </param>
  <param>
    <name>Device Data Format</name>
    <key>otw</key>
    <type>enum</type>
    <option>
      <name>Complex int16</name>
      <key>sc16</key>
    </option>
    <option>
      <name>Complex int8</name>
      <key>sc8</key>
    </option>
    <option>
      <name>Byte</name>
      <key>u8</key>
    </option>
    <tab>Output Config</tab>
  </param>

  <param>
    <name>Block Select</name>
    <key>block_index</key>
    <value>-1</value>
    <type>int</type>
    <hide>#if int($block_index()) &lt; 0 then 'part' else 'none'#</hide>
    <tab>RFNoC Config</tab>
  </param>
  <param>
    <name>Device Select</name>
    <key>device_index</key>
    <value>-1</value>
    <type>int</type>
    <hide>#if int($device_index()) &lt; 0 then 'part' else 'none'#</hide>
    <tab>RFNoC Config</tab>
  </param>

  <check>isinstance($sregs, dict)</check>
  <check>all([isinstance(x, int) for x in $sregs.keys()])</check>
  <check>all([isinstance(x, int) for x in $sregs.values()])</check>

  <sink>
    <name>in</name>
    <type>complex</type>
    <vlen>$in_grvlen</vlen>
    <domain>rfnoc</domain>
    <nports>$ninputs</nports>
  </sink>

  <source>
    <name>out</name>
    <type>complex</type>
    <vlen>$out_grvlen</vlen>
    <domain>rfnoc</domain>
    <nports>$noutputs</nports>
  </source>

</block>
